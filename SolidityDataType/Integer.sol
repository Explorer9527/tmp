// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;
/*
整数类型用 int/uint 表示有符号和无符号的整数。关键字 int/uint 的末尾接上一个数字表示数据类型所占用空间的大小，
这个数字是以 8 的倍数，最高为 256，因此，表示不同空间大小的整型有：uint8、uint16、uint32 ... uint256，
int 同理，无数字时 uint 和 int 对应 uint256 和 int56。
因此整数的取值范围跟不同空间大小有关， 比如 uint32 类型的取值范围是 0 到 2^32-1(2 的 32 次方减 1)。
如果整数的某些操作，其结果不在取值范围内，则会被溢出截断。 数据被截断可能引发严重后果，稍后举例。

整型支持以下几种运算符：
    比较运算符： <=（小于等于）、<（小于） 、==（等于）、!=（不等于）、>=（大于等于）、>（大于）
    位操作符： &（和）、|（或）、^（异或）、~（位取反）
    算术操作符：+（加号）、-（减）、-（负号）、* （乘法）、/ （除法）, %（取余数）, **（幂）
    移位： <<（左移位）、 >>（右移位）
        
运算注意事项：
    ① 整数除法总是截断的，但如果运算符是字面量（字面量稍后讲)，则不会截断。
    ② 整数除 0 会抛出异常。
    ③ 移位运算结果的正负取决于操作符左边的数。x << y 和 x * (2**y) 是相等的，x >> y 和 x / (2**y) 是相等的。
    ④ 不能进行负移位，即操作符右边的数不可以为负数，否则会在运行时抛出异常。
            
*/
contract Integer{
    uint8 public a = 255;//带符号的整数
    int16 public b = -2;//正整数，不能为负号，否则报错
    //默认值
    uint256 public defaultUint; // 0
    int256 public defaultInt; // 0

    function yunsuan() public view{ 
        //int和uint
        int s = 1213;//等同于int256 s = 1213;
        uint ss = 1;//等同于uint256 ss = 1;

        //加法
        uint8 c  = a - 1;//=254
        uint8 d = a + 1;//=0超过255溢出
        require(d >= a); // 做溢出判断，加法的结果肯定比任何一个元素大。
                        /*
                        整型溢出问题 在使用整型时，要特别注意整型的大小及所能容纳的最大值和最小值，
                        如 uint8 的最大值为 0xff（即：255），最小值是 0，
                        可以通过 Type(T).min 和 Type(T).max 获得整型的最小值与最大值。
                        */
        //移位运算
        uint8 f = 7 << 3;//=56
        uint8 g = 122 >> 2;//=30
        //int a >> -3;报错
    }
}