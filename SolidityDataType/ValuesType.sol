// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;
/*
Solidity 是一种静态类型语言，常见的静态类型语言有 C、C++、Java 等，
静态类型意味着程序在编译时就确定了每个变量（本地或状态变量）的类型。
Solidity 数据类型看起来很简单，但也容易出现问题，因为 Solidity 
的类型非常在意所占空间的大小（因为不同的数据大小，其存储的 gas 成本是不一样的），
如果不注意就可能发生“溢出”等问题。

Solidity 数据类型分为两类：
    值类型（Value Type）
    引用类型（Reference Type）

值类型维护变量的独立副本，在变量中更改值不会影响另一个变量中的值。值类型是大小不超过32字节内存的类型，常见类型
主要有： 
    布尔类型、整型、定长浮点型、定长字节数组、有理数和整型常量、
    字符串常量、十六进制常量、枚举、函数类型、地址类型、地址常量

引用类型不直接将其值存储在变量本身中，而是存储值存储位置的地址。变量保存了指向另一个实际存储数据的内存位置
的指针，更改引用类型变量中的值可确保任何引用该变量的地方都会获取更新值。常见的引用类型包括：
    数组、结构体、映射

*/
contract ValuesType{
    //值类型
    bool public bl = true;//布尔类型
    int8 iv  = 1;//整型

    //引用类型
    int[] public arr ;//数组
}